#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use JSON;
use esmith::AccountsDB;
use esmith::event;
use NethServer::ApiTools;
use NethServer::SSSD;

my $ret = undef;
my $db = esmith::AccountsDB->open() || die("Could not open AccountsDB");

my $input = NethServer::ApiTools::readInput();
my $item = $input->{'item'};
my $ibayName = $input->{'item'}->{'name'} || NethServer::ApiTools::error();

my $eventName = undef;

if($input->{'action'} eq 'edit') {
    $eventName = 'ibay-modify';
    my $isAd = NethServer::SSSD->new()->isAD();
    my %props = (
        'NfsHide' => $item->{'NfsHide'} || 'nohide',
        'NfsSecure' => $item->{'NfsSecure'} || 'secure',
        'NfsLocalNetwork' => $item->{'NfsLocalNetwork'} || 'disabled',
        'NfsWdelay' => $item->{'NfsWdelay'} || 'wdelay',
        'NfsSync' => $item->{'NfsSync'} || 'sync',
        'NfsStatus' => $item->{'NfsStatus'} || 'disabled'
    );

    if($isAd) {
        %props = (%props,
        'NfsUserID' => $item->{'NfsUserID'} || 'enabled',
        'NfsRootSquash' => $item->{'NfsRootSquash'} || 'root_squash',
        );
    }
    $db->get($ibayName)->merge_props(%props);
} else {
    error();
}

my @eventArgs = $ibayName;
my $exitCode = 0;

esmith::event::set_json_log(1);
my $success = esmith::event::event_signal($eventName, @eventArgs);
if($success) {
    NethServer::ApiTools::success();
} else {
    NethServer::ApiTools::error("EventError", "update_action_failed", 1555450763562);
}
}

print encode_json($ret);
exit($exitCode);



